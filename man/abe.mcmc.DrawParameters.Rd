% Generated by roxygen2 (4.0.1): do not edit by hand
\name{abe.mcmc.DrawParameters}
\alias{abe.mcmc.DrawParameters}
\title{HB Pareto/NBD variant as described in Abe (2009)}
\usage{
abe.mcmc.DrawParameters(cal.cbs, mcmc = 1500, burnin = 500, thin = 50,
  chains = 2, trace = 100)
}
\arguments{
\item{cal.cbs}{data.frame with columns \code{x}, \code{t.x}, \code{T.cal}}

\item{mcmc}{number of MCMC steps}

\item{burnin}{number of initial MCMC steps which are discarded}

\item{thin}{only every thin-th MCMC step will be returned}

\item{chains}{number of MCMC chains to be run}

\item{trace}{print logging step every \code{trace} iteration}
}
\value{
2-element list:
\itemize{
 \item{\code{level_1}}{list of \code{\link{mcmc.list}} objects; one for each customer, containing individual-level draws}
 \item{\code{level_2}}{\code{\link{mcmc.list}} object containing draws of heterogeneity parameters}
}
}
\description{
TODO: implement passing of covariates
}
\details{
Returns 2-element list
  level_1:  3-dim array [draw x parameter x cust] wrapped as coda::mcmc.list object
  level_2:  2-dim array [draw x parameter] wrapped as coda::mcmc.list object
}
\examples{

# load CDnow data
data(cdnowSummary, package="BTYD")
data <- as.data.frame(cdnowSummary$cbs)

set.seed(1)
# estimate parameters
draws <- abe.mcmc.DrawParameters(data, burnin=5000, mcmc=5000, thin=100, chains=2)

agg <- function(x) round(c(quantile(x, 0.025), "mean"=mean(x), quantile(x, 0.975)), 2)
agg(as.matrix(draws$level_2)[, "log_lambda"])
agg(as.matrix(draws$level_2)[, "log_mu"])
agg((as.matrix(draws$level_2)[, "sigma_lambda_lambda"]))
agg((as.matrix(draws$level_2)[, "sigma_mu_mu"]))
agg((as.matrix(draws$level_2)[, "sigma_lambda_mu"]))
# -> parameter estimates match results shown in Abe's paper

xstar <- abe.mcmc.DrawFutureTransactions(data, draws, T.star=39)
mcmc.palive    <- abe.mcmc.PAlive(data, draws)
mcmc.est       <- colMeans(xstar)
#mcmc.est       <- apply(xstar, 2, median)
mcmc.est.pos   <- colMeans(xstar>0)

cor(data$x.star, mcmc.est)
# 0.62

mse <- function(x1, x2) sqrt(mean((x1-x2)^2))
mse(data$x.star, mcmc.est)
# 1.61

mae <- function(x1, x2) mean(abs(x1-x2))
mae(data$x.star, mcmc.est)
# 0.75
}
\seealso{
\code{link{abe.GenerateData}}
}

